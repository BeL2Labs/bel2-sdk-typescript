/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethersv5";
import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from "./common";

export type TxVerifyRecordStruct = { btcTxZkpAddr: string; zkpID: BytesLike };

export type TxVerifyRecordStructOutput = [string, string] & {
  btcTxZkpAddr: string;
  zkpID: string;
};

export type InputStruct = { txid: BytesLike; amount: BigNumberish };

export type InputStructOutput = [string, BigNumber] & {
  txid: string;
  amount: BigNumber;
};

export type OutputStruct = {
  txType: BigNumberish;
  addr: string;
  amount: BigNumberish;
};

export type OutputStructOutput = [number, string, BigNumber] & {
  txType: number;
  addr: string;
  amount: BigNumber;
};

export interface BtcTxVerifierInterface extends utils.Interface {
  functions: {
    "btcHeaderAddr()": FunctionFragment;
    "btcTxZkpAddr()": FunctionFragment;
    "getLastBtcHeight()": FunctionFragment;
    "getTxVerifyRecord(bytes32)": FunctionFragment;
    "getTxZkpStatus(bytes32)": FunctionFragment;
    "getVerifiedTxDetails(bytes32,string)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBtcHeaderAddr(address)": FunctionFragment;
    "setBtcTxZkpAddr(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyBtcTx(bytes,bytes[],uint32,bytes32[],bytes32,bytes32,bool[],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "btcHeaderAddr"
      | "btcTxZkpAddr"
      | "getLastBtcHeight"
      | "getTxVerifyRecord"
      | "getTxZkpStatus"
      | "getVerifiedTxDetails"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "setBtcHeaderAddr"
      | "setBtcTxZkpAddr"
      | "transferOwnership"
      | "verifyBtcTx"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "btcHeaderAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "btcTxZkpAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBtcHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTxVerifyRecord",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTxZkpStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedTxDetails",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBtcHeaderAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBtcTxZkpAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBtcTx",
    values: [
      BytesLike,
      BytesLike[],
      BigNumberish,
      BytesLike[],
      BytesLike,
      BytesLike,
      boolean[],
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "btcHeaderAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "btcTxZkpAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBtcHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTxVerifyRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTxZkpStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedTxDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBtcHeaderAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBtcTxZkpAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBtcTx",
    data: BytesLike
  ): Result;

  events: {
    "BtcHeaderAddrChanged(address,address)": EventFragment;
    "BtcTxVerified(bytes32)": EventFragment;
    "BtcTxZkpAddrChanged(address,address)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BtcHeaderAddrChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BtcTxVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BtcTxZkpAddrChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BtcHeaderAddrChangedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type BtcHeaderAddrChangedEvent = TypedEvent<
  [string, string],
  BtcHeaderAddrChangedEventObject
>;

export type BtcHeaderAddrChangedEventFilter =
  TypedEventFilter<BtcHeaderAddrChangedEvent>;

export interface BtcTxVerifiedEventObject {
  txid: string;
}
export type BtcTxVerifiedEvent = TypedEvent<[string], BtcTxVerifiedEventObject>;

export type BtcTxVerifiedEventFilter = TypedEventFilter<BtcTxVerifiedEvent>;

export interface BtcTxZkpAddrChangedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type BtcTxZkpAddrChangedEvent = TypedEvent<
  [string, string],
  BtcTxZkpAddrChangedEventObject
>;

export type BtcTxZkpAddrChangedEventFilter =
  TypedEventFilter<BtcTxZkpAddrChangedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BtcTxVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BtcTxVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    btcHeaderAddr(overrides?: CallOverrides): Promise<[string]>;

    btcTxZkpAddr(overrides?: CallOverrides): Promise<[string]>;

    getLastBtcHeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTxVerifyRecord(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[TxVerifyRecordStructOutput]>;

    getTxZkpStatus(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getVerifiedTxDetails(
      txHash: BytesLike,
      network: string,
      overrides?: CallOverrides
    ): Promise<
      [string, InputStructOutput[], OutputStructOutput[], string, number]
    >;

    initialize(
      _btcTxZkpAddr: string,
      _btcHeaderAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBtcHeaderAddr(
      newBtcHeaderAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBtcTxZkpAddr(
      newBtcTxZkpAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    verifyBtcTx(
      rawTx: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: BytesLike[],
      blockMerkleRoot: BytesLike,
      txHash: BytesLike,
      proofPositions: boolean[],
      script: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  btcHeaderAddr(overrides?: CallOverrides): Promise<string>;

  btcTxZkpAddr(overrides?: CallOverrides): Promise<string>;

  getLastBtcHeight(overrides?: CallOverrides): Promise<BigNumber>;

  getTxVerifyRecord(
    txHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<TxVerifyRecordStructOutput>;

  getTxZkpStatus(txHash: BytesLike, overrides?: CallOverrides): Promise<number>;

  getVerifiedTxDetails(
    txHash: BytesLike,
    network: string,
    overrides?: CallOverrides
  ): Promise<
    [string, InputStructOutput[], OutputStructOutput[], string, number]
  >;

  initialize(
    _btcTxZkpAddr: string,
    _btcHeaderAddr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBtcHeaderAddr(
    newBtcHeaderAddr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBtcTxZkpAddr(
    newBtcTxZkpAddr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  verifyBtcTx(
    rawTx: BytesLike,
    utxos: BytesLike[],
    blockHeight: BigNumberish,
    merkleProof: BytesLike[],
    blockMerkleRoot: BytesLike,
    txHash: BytesLike,
    proofPositions: boolean[],
    script: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    btcHeaderAddr(overrides?: CallOverrides): Promise<string>;

    btcTxZkpAddr(overrides?: CallOverrides): Promise<string>;

    getLastBtcHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getTxVerifyRecord(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<TxVerifyRecordStructOutput>;

    getTxZkpStatus(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getVerifiedTxDetails(
      txHash: BytesLike,
      network: string,
      overrides?: CallOverrides
    ): Promise<
      [string, InputStructOutput[], OutputStructOutput[], string, number]
    >;

    initialize(
      _btcTxZkpAddr: string,
      _btcHeaderAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBtcHeaderAddr(
      newBtcHeaderAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBtcTxZkpAddr(
      newBtcTxZkpAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyBtcTx(
      rawTx: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: BytesLike[],
      blockMerkleRoot: BytesLike,
      txHash: BytesLike,
      proofPositions: boolean[],
      script: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BtcHeaderAddrChanged(address,address)"(
      oldAddress?: string | null,
      newAddress?: string | null
    ): BtcHeaderAddrChangedEventFilter;
    BtcHeaderAddrChanged(
      oldAddress?: string | null,
      newAddress?: string | null
    ): BtcHeaderAddrChangedEventFilter;

    "BtcTxVerified(bytes32)"(txid?: BytesLike | null): BtcTxVerifiedEventFilter;
    BtcTxVerified(txid?: BytesLike | null): BtcTxVerifiedEventFilter;

    "BtcTxZkpAddrChanged(address,address)"(
      oldAddress?: string | null,
      newAddress?: string | null
    ): BtcTxZkpAddrChangedEventFilter;
    BtcTxZkpAddrChanged(
      oldAddress?: string | null,
      newAddress?: string | null
    ): BtcTxZkpAddrChangedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    btcHeaderAddr(overrides?: CallOverrides): Promise<BigNumber>;

    btcTxZkpAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getLastBtcHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getTxVerifyRecord(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTxZkpStatus(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifiedTxDetails(
      txHash: BytesLike,
      network: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _btcTxZkpAddr: string,
      _btcHeaderAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBtcHeaderAddr(
      newBtcHeaderAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBtcTxZkpAddr(
      newBtcTxZkpAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    verifyBtcTx(
      rawTx: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: BytesLike[],
      blockMerkleRoot: BytesLike,
      txHash: BytesLike,
      proofPositions: boolean[],
      script: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    btcHeaderAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btcTxZkpAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastBtcHeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTxVerifyRecord(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTxZkpStatus(
      txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifiedTxDetails(
      txHash: BytesLike,
      network: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _btcTxZkpAddr: string,
      _btcHeaderAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBtcHeaderAddr(
      newBtcHeaderAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBtcTxZkpAddr(
      newBtcTxZkpAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verifyBtcTx(
      rawTx: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: BytesLike[],
      blockMerkleRoot: BytesLike,
      txHash: BytesLike,
      proofPositions: boolean[],
      script: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
